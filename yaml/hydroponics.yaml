substitutions:
  devicename: "hydroponics"

esphome:
  name: $devicename
  friendly_name: $devicename
  # on_boot:
  #   - lambda: |-
  #       (unsigned char)id(my_ota).set_auth_password("");

esp32:
  board: esp32-gateway
  framework:
    type: arduino
    # version: 2.0.11

# Enable logging
logger:

# Enable Home Assistant API
api:
  # encryption:
  #   key: "V9+MQ4tYb7ZCHFnhyWMQNNzwPPE5GOTjB1/81/F2e7A="

ota:
  # password: "f5504587974ff2df678dd129be723ca9"

wifi:
  ssid: !secret wifi_ssid2
  password: !secret wifi_password2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $devicename
    password: $devicename

  reboot_timeout: 0s
  fast_connect: true
  power_save_mode: none
captive_portal:

web_server:
  port: 80
  css_url: v3
  include_internal: True
  local: True
  version: 2

interval:
  - interval: 100ms
    then:
      if:
        condition:
          wifi.connected:
        then:
          if:
            condition:
              api.connected:
            then:
              if:
                condition:
                  not:
                    light.is_on: led
                then:
                  - light.turn_on: 
                      id: led
                      effect: none
            else:
              if:
                condition:
                  not:
                    light.is_on: led
                then:
                  - light.turn_on: 
                      id: led
                      effect: strobe
        else:
          - light.turn_off: 
              id: led



i2c:
  id: i2c0
  sda: GPIO16
  scl: GPIO32
  scan: True


# tca9548a:
#   - address: 0x70
#     id: multiplex0
#     i2c_id: i2c0
#     channels:
#       - bus_id: multiplex0channel0
#         channel: 0
#       - bus_id: multiplex0channel1
#         channel: 1
#       - bus_id: multiplex0channel2
#         channel: 2
#       - bus_id: multiplex0channel3
#         channel: 3
#       - bus_id: multiplex0channel4
#         channel: 4
#       - bus_id: multiplex0channel5
#         channel: 5
#       - bus_id: multiplex0channel6
#         channel: 6
#       - bus_id: multiplex0channel7
#         channel: 7


# ezo_pmp:
#   id: ezo_pmp0
#   address: 0x67  # Default Address for the EZO-PMP.
#   i2c_id: multiplex0channel1
#   update_interval: 1s    

# ads1115:
#   - id: ads1115_hub0
#     address: 0x48
#     i2c_id: multiplex0channel0
#     continuous_mode: True


# pca9685:
#   - id: pca9685_hub0
#     i2c_id: multiplex0channel0
#     frequency: 1500


# # pca9685custom:
# #   - id: pca9685custom_hub0
# #     address: 0x40
# #     i2c_id: multiplex0channel0
# #     frequency: 1500


external_components:
  - source: github://Hasatio/esphome
    components: [water_quality]
    refresh: always

water_quality:
  id: water
  address: 0x70
  i2c_id: i2c0
  pump1: 
    pump_type: 1
    pump_calibration:
      x: [11,21,31,41,51,61,71,81]
      y: [15,25,35,45,55,65,75,85]
  pump2: 
    pump_type: 2
    pump_calibration:
      x: [12,22,32,42,52,62,72,82]
      y: [16,26,36,46,56,66,76,86]
  pump3: 
    pump_type: 0
  pump4: 
    pump_type: 0
  pump5: 
    pump_type: 2
    pump_calibration:
      x: [13,23,33,43,53,63,73,83]
      y: [17,27,37,47,57,67,77,87]
  pump6: 
    pump_type: 1
    pump_calibration:
      x: [14,24,34,44,54,64,74,84]
      y: [18,28,38,48,58,68,78,88]
  level:
    res_min: [150]
    res_max: [250]
  sensors:
    ec_channel: 1
    ec_type: 1
    ph_channel: 2
    ph_type: 1


sensor:
  - platform: internal_temperature
    name: "Internal Temperature"

  - platform: water_quality
    time_constant:
      id: time_constant
    pump_total_ml:
      id: pump_total_ml
    pump_total_l:
      id: pump_total_l
    pump_status:
      id: pump_status
    servo_status:
      id: servo_status
    water_temp:
      id: water_temp
    voltage:
      id: voltage
    level:
      id: level
    analog:
      id: analog
    ec:
      id: ec
    ph:
      id: ph
    digital:
      id: digital

  # - platform: ads1115
  #   multiplexer: A0_GND
  #   ads1115_id : ads1115_hub0
  #   gain: 6.144
  #   name: "ADS1115 1"
  #   id: "ADS1115_1"
  #   update_interval: 0ms


button:
  - platform: restart
    name: "Restart"
    

switch:
#   - platform: gpio
#     name: "Led"
#     pin: 
#       number: GPIO33
#       mode:
#         output: True
#       inverted: False
    
  - platform: template
    id: pump_reset1
    name: "Pump_Reset1"
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
    turn_off_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
        - delay: 0s
        - switch.turn_off: pump_reset1

  - platform: template
    id: pump_reset2
    name: "Pump_Reset2"
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
    turn_off_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
        - delay: 0s
        - switch.turn_off: pump_reset2

  - platform: template
    id: pump_reset3
    name: "Pump_Reset3"
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
    turn_off_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
        - delay: 0s
        - switch.turn_off: pump_reset3

  - platform: template
    id: pump_reset4
    name: "Pump_Reset4"
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
    turn_off_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
        - delay: 0s
        - switch.turn_off: pump_reset4

  - platform: template
    id: pump_reset5
    name: "Pump_Reset5"
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
    turn_off_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
        - delay: 0s
        - switch.turn_off: pump_reset5

  - platform: template
    id: pump_reset6
    name: "Pump_Reset6"
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
    turn_off_action:
      then:
        - water_quality.pump_reset:
            pump_reset: !lambda |-
              return {(bool)id(pump_reset1).state, (bool)id(pump_reset2).state, (bool)id(pump_reset3).state, (bool)id(pump_reset4).state, (bool)id(pump_reset5).state, (bool)id(pump_reset6).state};
        - delay: 0s
        - switch.turn_off: pump_reset6

  - platform: template
    id: digital_out1
    name: "Digital_Out1"
    optimistic: true
    turn_on_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};
    turn_off_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};

  - platform: template
    id: digital_out2
    name: "Digital_Out2"
    optimistic: true
    turn_on_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};
    turn_off_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};

  - platform: template
    id: digital_out3
    name: "Digital_Out3"
    optimistic: true
    turn_on_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};
    turn_off_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};

  - platform: template
    id: digital_out4
    name: "Digital_Out4"
    optimistic: true
    turn_on_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};
    turn_off_action:
      then:
        - water_quality.digital_out:
            digital_out: !lambda |-
              return {(bool)id(digital_out1).state, (bool)id(digital_out2).state, (bool)id(digital_out3).state, (bool)id(digital_out4).state};


# status_led:
#     pin: 
#       number: GPIO33
#       mode: 
#         output: True
      # inverted: False


light:
  # - platform: status_led
  #   name: "status led"
  #   id: status
  #   pin: 
  #     number: GPIO33
  #     mode:
  #       output: True
  #     inverted: False

  - platform: binary
    name: "led"
    id: led
    output: out
    effects:
      - strobe:
          name: strobe
          colors:
            - state: true
              brightness: 100%
              duration: 100ms
            - state: false
              duration: 50ms
            - state: true
              brightness: 100%
              duration: 100ms
            - state: false
              duration: 200ms
    # on_state:
    #   if:
    #     condition:
    #       wifi.connected:
    #     then:
    #     - light.turn_on: 
    #         id: led
    #         # effect: strobe


output:
  - platform: gpio
    id: out
    pin: 
      number: GPIO33
      mode:
        output: True
      inverted: False


number:
  - platform: template
    id: pump_mode1
    name: "Pump_Mode1"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 2
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_mode:
            # id: water
            # pump_mode: [1,2]
            # pump_mode: !lambda |- 
            #   int mode1_state = 1;
            #   int mode2_state = 2;
            #   std::vector<uint8_t> pump_mode = {mode1_state, mode2_state};
            #   return pump_mode;
            # pump_mode: !lambda |- 
            #   return {1, 0, 1, 4};
            pump_mode: !lambda |- 
              return {(unsigned char)id(pump_mode1).state, (unsigned char)id(pump_mode2).state, (unsigned char)id(pump_mode3).state, (unsigned char)id(pump_mode4).state, (unsigned char)id(pump_mode5).state, (unsigned char)id(pump_mode6).state};

  - platform: template
    id: pump_mode2
    name: "Pump_Mode2"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 2
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_mode:
            pump_mode: !lambda |-
              return {(unsigned char)id(pump_mode1).state, (unsigned char)id(pump_mode2).state, (unsigned char)id(pump_mode3).state, (unsigned char)id(pump_mode4).state, (unsigned char)id(pump_mode5).state, (unsigned char)id(pump_mode6).state};

  - platform: template
    id: pump_mode3
    name: "Pump_Mode3"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 2
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_mode:
            pump_mode: !lambda |-
              return {(unsigned char)id(pump_mode1).state, (unsigned char)id(pump_mode2).state, (unsigned char)id(pump_mode3).state, (unsigned char)id(pump_mode4).state, (unsigned char)id(pump_mode5).state, (unsigned char)id(pump_mode6).state};

  - platform: template
    id: pump_mode4
    name: "Pump_Mode4"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 2
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_mode:
            pump_mode: !lambda |-
              return {(unsigned char)id(pump_mode1).state, (unsigned char)id(pump_mode2).state, (unsigned char)id(pump_mode3).state, (unsigned char)id(pump_mode4).state, (unsigned char)id(pump_mode5).state, (unsigned char)id(pump_mode6).state};

  - platform: template
    id: pump_mode5
    name: "Pump_Mode5"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 2
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_mode:
            pump_mode: !lambda |-
              return {(unsigned char)id(pump_mode1).state, (unsigned char)id(pump_mode2).state, (unsigned char)id(pump_mode3).state, (unsigned char)id(pump_mode4).state, (unsigned char)id(pump_mode5).state, (unsigned char)id(pump_mode6).state};

  - platform: template
    id: pump_mode6
    name: "Pump_Mode6"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 2
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_mode:
            pump_mode: !lambda |-
              return {(unsigned char)id(pump_mode1).state, (unsigned char)id(pump_mode2).state, (unsigned char)id(pump_mode3).state, (unsigned char)id(pump_mode4).state, (unsigned char)id(pump_mode5).state, (unsigned char)id(pump_mode6).state};

  - platform: template
    id: pump_dose1
    name: "Pump_Dose1"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_dose:
            id: water
            pump_dose: !lambda |-
              return {(unsigned char)id(pump_dose1).state, (unsigned char)id(pump_dose2).state, (unsigned char)id(pump_dose3).state, (unsigned char)id(pump_dose4).state, (unsigned char)id(pump_dose5).state, (unsigned char)id(pump_dose6).state};

  - platform: template
    id: pump_dose2
    name: "Pump_Dose2"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_dose:
            id: water
            pump_dose: !lambda |-
              return {(unsigned char)id(pump_dose1).state, (unsigned char)id(pump_dose2).state, (unsigned char)id(pump_dose3).state, (unsigned char)id(pump_dose4).state, (unsigned char)id(pump_dose5).state, (unsigned char)id(pump_dose6).state};

  - platform: template
    id: pump_dose3
    name: "Pump_Dose3"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_dose:
            id: water
            pump_dose: !lambda |-
              return {(unsigned char)id(pump_dose1).state, (unsigned char)id(pump_dose2).state, (unsigned char)id(pump_dose3).state, (unsigned char)id(pump_dose4).state, (unsigned char)id(pump_dose5).state, (unsigned char)id(pump_dose6).state};

  - platform: template
    id: pump_dose4
    name: "Pump_Dose4"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_dose:
            id: water
            pump_dose: !lambda |-
              return {(unsigned char)id(pump_dose1).state, (unsigned char)id(pump_dose2).state, (unsigned char)id(pump_dose3).state, (unsigned char)id(pump_dose4).state, (unsigned char)id(pump_dose5).state, (unsigned char)id(pump_dose6).state};

  - platform: template
    id: pump_dose5
    name: "Pump_Dose5"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_dose:
            id: water
            pump_dose: !lambda |-
              return {(unsigned char)id(pump_dose1).state, (unsigned char)id(pump_dose2).state, (unsigned char)id(pump_dose3).state, (unsigned char)id(pump_dose4).state, (unsigned char)id(pump_dose5).state, (unsigned char)id(pump_dose6).state};

  - platform: template
    id: pump_dose6
    name: "Pump_Dose6"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_dose:
            id: water
            pump_dose: !lambda |-
              return {(unsigned char)id(pump_dose1).state, (unsigned char)id(pump_dose2).state, (unsigned char)id(pump_dose3).state, (unsigned char)id(pump_dose4).state, (unsigned char)id(pump_dose5).state, (unsigned char)id(pump_dose6).state};

  - platform: template
    id: pump_circulation1
    name: "Pump_Circulation1"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_circulation:
            id: water
            pump_circulation: !lambda |-
              return {(unsigned char)id(pump_circulation1).state, (unsigned char)id(pump_circulation2).state, (unsigned char)id(pump_circulation3).state, (unsigned char)id(pump_circulation4).state, (unsigned char)id(pump_circulation5).state, (unsigned char)id(pump_circulation6).state};

  - platform: template
    id: pump_circulation2
    name: "Pump_Circulation2"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_circulation:
            id: water
            pump_circulation: !lambda |-
              return {(unsigned char)id(pump_circulation1).state, (unsigned char)id(pump_circulation2).state, (unsigned char)id(pump_circulation3).state, (unsigned char)id(pump_circulation4).state, (unsigned char)id(pump_circulation5).state, (unsigned char)id(pump_circulation6).state};

  - platform: template
    id: pump_circulation3
    name: "Pump_Circulation3"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_circulation:
            id: water
            pump_circulation: !lambda |-
              return {(unsigned char)id(pump_circulation1).state, (unsigned char)id(pump_circulation2).state, (unsigned char)id(pump_circulation3).state, (unsigned char)id(pump_circulation4).state, (unsigned char)id(pump_circulation5).state, (unsigned char)id(pump_circulation6).state};

  - platform: template
    id: pump_circulation4
    name: "Pump_Circulation4"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_circulation:
            id: water
            pump_circulation: !lambda |-
              return {(unsigned char)id(pump_circulation1).state, (unsigned char)id(pump_circulation2).state, (unsigned char)id(pump_circulation3).state, (unsigned char)id(pump_circulation4).state, (unsigned char)id(pump_circulation5).state, (unsigned char)id(pump_circulation6).state};

  - platform: template
    id: pump_circulation5
    name: "Pump_Circulation5"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_circulation:
            id: water
            pump_circulation: !lambda |-
              return {(unsigned char)id(pump_circulation1).state, (unsigned char)id(pump_circulation2).state, (unsigned char)id(pump_circulation3).state, (unsigned char)id(pump_circulation4).state, (unsigned char)id(pump_circulation5).state, (unsigned char)id(pump_circulation6).state};

  - platform: template
    id: pump_circulation6
    name: "Pump_Circulation6"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - water_quality.pump_circulation:
            id: water
            pump_circulation: !lambda |-
              return {(unsigned char)id(pump_circulation1).state, (unsigned char)id(pump_circulation2).state, (unsigned char)id(pump_circulation3).state, (unsigned char)id(pump_circulation4).state, (unsigned char)id(pump_circulation5).state, (unsigned char)id(pump_circulation6).state};

  # - platform: template
  #   id: duration
  #   name: "Duration"
  #   optimistic: true
  #   min_value: 0
  #   max_value: 100
  #   initial_value: 0
  #   step: 1

  # - platform: template
  #   id: calibration
  #   name: "Calibration Value"
  #   optimistic: true
  #   min_value: 0
  #   max_value: 10000
  #   step: 0.01


# text_sensor:
  # - platform: ezo_pmp
  #   dosing_mode:
  #     id: dosing_mode
  #     name: Dosing Mode
  # - platform: ezo_pmp
  #   calibration_status:
  #     id: calibration_status
  #     name: Calibration Status


# binary_sensor:
  # - platform: ezo_pmp
  #   is_paused:
  #     id: is_paused
  #     name: Is Paused

  # - platform: ezo_pmp
  #   pump_state:
  #     id: pump_state
  #     name: Pump State    
